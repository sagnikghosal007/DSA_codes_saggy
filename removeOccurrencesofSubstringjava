class Solution {
    public String removeOccurrences(String str, String rem) {
      	Stack<Character> st=new Stack<>();
		int n=str.length();
		int len=rem.length();
		for(int i=0;i<n;i++) {
			st.push(str.charAt(i));
			if(st.size()>=len) {
				if(checkstack(st,rem)) {
					for(int j=0;j<len;j++) {
						st.pop();
					}
				}
			}
		}
		StringBuilder ans=new StringBuilder();
		while(!st.isEmpty()) {
			ans.append(st.pop());
		}
		return ans.reverse().toString();
	}
	public static boolean checkstack(Stack<Character> st,String rem) {
		int i=rem.length()-1;
		Stack<Character> temp=new Stack<>();
		while(i>=0 && !st.isEmpty() && st.peek()==rem.charAt(i)){
            temp.push(st.pop());
            i--;
        }
        boolean found=(i<0);
		while(!temp.isEmpty()) {
			st.push(temp.pop());
		}
		return found;
	}
}

// class Solution {
//     public String removeOccurrences(String s, String part) {
//         int n=s.length();
//         int p=part.length();
//         int k=s.indexOf(part);
//         while(k!=-1){ 
//             s=s.substring(0,k)+s.substring(k+p);
//             n=s.length();
//             k=s.indexOf(part);
//         }
//         return s;
//     }
// }
